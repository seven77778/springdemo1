from https://www.cnblogs.com/qfjavabd/p/10931663.html

控制反转(IoC)和依赖注入(DI)

IoC(Inversion of Control,控制翻转) 是Spring 中一个非常非常重要的概念，
它不是什么技术，而是一种解耦的设计思想。
它的主要目的是借助于“第三方”(Spring 中的 IOC 容器) 实现具有依赖关系的对象之间的解耦(IOC容易管理对象，你只管使用即可)，
从而降低代码之间的耦合度。
IOC 是一个原则，而不是一个模式。

Spring IOC 容器就像是一个工厂一样，当我们需要创建一个对象的时候，
只需要配置好配置文件/注解即可，完全不用考虑对象是如何被创建出来的。

【控制反转 IOC】
控制翻转怎么理解呢? 举个例子：“对象a 依赖了对象 b，当对象 a 需要使用 对象 b的时候必须自己去创建。
但是当系统引入了 IOC 容器后， 对象a 和对象 b 之前就失去了直接的联系。
这个时候，当对象 a 需要使用 对象 b的时候， 我们可以指定 IOC 容器去创建一个对象b注入到对象 a 中”。
对象 a 获得依赖对象 b 的过程,由主动行为变为了被动行为，控制权翻转，这就是控制反转名字的由来

【依赖注入 DI】
DI(Dependecy Inject,依赖注入)是实现控制反转的一种设计模式，依赖注入就是将实例变量传入到一个对象中去

【总结】
    　IOC就是一种软件设计思想，DI是这种软件设计思想的一个实现。而Spring中的核心机制就是DI。


